load "lib/assets/junction_points.rb"

$j_points = junctions
def find_by_id(arr, id)
    arr.each do |i|
        return i if i[:id] == id
    end
end

def calculate_distance(edge)

    from_point = find_by_id($j_points, edge[0])
    to_point = find_by_id($j_points,edge[1])

    x1 = from_point[:left]
    x2 = to_point[:left]

    y1 = from_point[:top]
    y2 = to_point[:top]

    Math.sqrt( (x1-x2)**2 + (y1-y2)**2 ) * 0.28960526315789475 # 1px mapped to map's covered distance in metre

end
# paste the output of edgeScript Here
edges = [[1, 2],
         [2, 3],
         [3, 4],
         [3, 5],
         [4, 6],
         [5, 7],
         [6, 8],
         [7, 8],
         [8, 9],
         [7, 10],
         [10, 11],
         [11, 12],
         [12, 13],
         [10, 15],
         [15, 16],
         [16, 18],
         [15, 17],
         [17, 18],
         [17, 19],
         [19, 21],
         [21, 22],
         [20, 22],
         [21, 23],
         [23, 24],
         [23, 27],
         [27, 25],
         [24, 26],
         [25, 26],
         [27, 28],
         [28, 29],
         [29, 30],
         [30, 31],
         [29, 32],
         [34, 35],
         [32, 36],
         [35, 36],
         [36, 37],
         [37, 38],
         [38, 39],
         [39, 40],
         [38, 41],
         [41, 42],
         [42, 43],
         [43, 44],
         [44, 45],
         [42, 46],
         [46, 47],
         [47, 45],
         [47, 48],
         [48, 49],
         [49, 50],
         [50, 51],
         [51, 52],
         [51, 53],
         [53, 61],
         [53, 54],
         [54, 56],
         [54, 55],
         [55, 58],
         [56, 57],
         [58, 57],
         [58, 59],
         [57, 60],
         [61, 62],
         [63, 62],
         [63, 64],
         [64, 65],
         [65, 73],
         [60, 63],
         [66, 67],
         [68, 69],
         [61, 70],
         [62, 66],
         [66, 71],
         [68, 67],
         [68, 70],
         [71, 74],
         [71, 72],
         [74, 75],
         [75, 76],
         [72, 73],
         [77, 78],
         [74, 79],
         [78, 79],
         [76, 77],
         [81, 82],
         [79, 80],
         [80, 81],
         [49, 82],
         [49, 83],
         [83, 87],
         [83, 84],
         [84, 85],
         [85, 86],
         [84, 88],
         [88, 48],
         [88, 120],
         [88, 89],
         [89, 90],
         [90, 46],
         [90, 91],
         [91, 92],
         [92, 41],
         [92, 93],
         [93, 94],
         [94, 95],
         [95, 96],
         [96, 37],
         [96, 97],
         [97, 98],
         [98, 99],
         [99, 100],
         [100, 28],
         [100, 101],
         [101, 102],
         [102, 103],
         [103, 104],
         [104, 159],
         [102, 108],
         [108, 107],
         [104, 105],
         [107, 106],
         [105, 106],
         [106, 109],
         [109, 110],
         [109, 112],
         [110, 111],
         [112, 111],
         [110, 158],
         [111, 14],
         [14, 11],
         [112, 113],
         [113, 114],
         [114, 115],
         [115, 98],
         [114, 116],
         [116, 94],
         [116, 117],
         [85, 118],
         [118, 119],
         [119, 120],
         [120, 121],
         [121, 122],
         [122, 123],
         [123, 124],
         [122, 148],
         [124, 125],
         [124, 147],
         [125, 126],
         [126, 127],
         [126, 116],
         [127, 128],
         [128, 129],
         [128, 146],
         [129, 130],
         [130, 114],
         [130, 131],
         [131, 132],
         [132, 133],
         [145, 132],
         [133, 134],
         [134, 135],
         [135, 136],
         [140, 135],
         [136, 137],
         [139, 140],
         [139, 138],
         [138, 137],
         [142, 113],
         [138, 141],
         [141, 142],
         [141, 143],
         [142, 143],
         [12, 144],
         [143, 144],
         [144, 145],
         [145, 146],
         [146, 147],
         [147, 148],
         [148, 149],
         [149, 150],
         [149, 151],
         [151, 119],
         [151, 152],
         [152, 153],
         [153, 154],
         [154, 155],
         [155, 156],
         [156, 145],
         [153, 157],
         [158, 159],
         [158, 19],
         [151, 160],
         [160, 161],
         [160, 166],
         [166, 167],
         [167, 168],
         [161, 164],
         [164, 165],
         [161, 162],
         [162, 163],
         [162, 170],
         [164, 172],
         [170, 171],
         [171, 172],
         [171, 176],
         [172, 175],
         [170, 173],
         [173, 176],
         [175, 176],
         [168, 169],
         [169, 177],
         [177, 182],
         [182, 183],
         [183, 197],
         [197, 184],
         [197, 185],
         [185, 187],
         [192, 198],
         [187, 176],
         [180, 179],
         [179, 181],
         [178, 179],
         [178, 190],
         [189, 190],
         [196, 190],
         [188, 189],
         [176, 188],
         [163, 191],
         [192, 191],
         [165, 193],
         [195, 196],
         [193, 194],
         [185, 186],
         [186, 189],
         [176, 186],
         [198, 182],
         [194, 199],
         [199, 200],
         [200, 201],
         [201, 195]]


arr = []
edges.each do |edge|
    arr << [edge[0], edge[1], calculate_distance(edge)]
end
pp arr

puts "\npaste the output to the edges.rb"